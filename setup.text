1Ô∏è‚É£ Create project
‚Üí composer create-project laravel/laravel laravel-api "11.*"

2Ô∏è‚É£ Go into project folder
‚Üí cd laravel-api

3Ô∏è‚É£ Serve on port 2599
‚Üí php artisan serve --port=2599

4Ô∏è‚É£ Create MySQL database: laravel_api

5Ô∏è‚É£ Update .env:
DB_DATABASE=laravel_api
DB_USERNAME=root
DB_PASSWORD=
APP_URL=http://127.0.0.1:2599

6Ô∏è‚É£ Modify create_users_table.php
‚Üí Add phone, is_active, is_deleted fields

7Ô∏è‚É£ Run migration
‚Üí php artisan migrate

8Ô∏è‚É£ Update User.php model
‚Üí Add fillable & hidden properties

9Ô∏è‚É£ Create controller
‚Üí php artisan make:controller API/UserController

üîü In UserController.php, add:

index() ‚Üí get all users

store() ‚Üí create user

1Ô∏è‚É£1Ô∏è‚É£ Create routes/api.php
‚Üí Add:
Route::get('/users', [UserController::class, 'index']);
Route::post('/users', [UserController::class, 'store']);
Route::put('/users/{id}', [UserController::class, 'update']);
Route::delete('/users/{id}', [UserController::class, 'destroy']);

1Ô∏è‚É£2Ô∏è‚É£ Edit bootstrap/app.php:
web: __DIR__.'/../routes/web.php',
    api: __DIR__.'/../routes/api.php', ------ add this line 
    
1Ô∏è‚É£3Ô∏è‚É£ Test API in Postman:
GET http://127.0.0.1:2599/api/users
POST http://127.0.0.1:2599/api/users

üîê Sanctum Authentication Setup
1Ô∏è‚É£4Ô∏è‚É£ Create AuthController
‚Üí php artisan make:controller AuthController

1Ô∏è‚É£5Ô∏è‚É£ Add methods

register()

login()

1Ô∏è‚É£6Ô∏è‚É£ Add auth routes in routes/api.php
Route::post('/register', [AuthController::class, 'register']);
Route::post('/login', [AuthController::class, 'login']);

1Ô∏è‚É£7Ô∏è‚É£ Install Sanctum
composer require laravel/sanctum  
php artisan vendor:publish --tag=sanctum-config  
php artisan migrate

1Ô∏è‚É£8Ô∏è‚É£ Update User model
‚Üí Add use HasApiTokens
‚Üí Include trait: HasApiTokens, SoftDeletes, ...

1Ô∏è‚É£9Ô∏è‚É£ Protect product routes
Route::middleware('auth:sanctum')->group(function () {
    Route::post('/products', [ProductController::class, 'store']);
    Route::get('/products', [ProductController::class, 'index']);
    Route::get('/products/{id}', [ProductController::class, 'show']);
});

Product Module (Jewelry eCommerce)
2Ô∏è‚É£0Ô∏è‚É£ Create products table migration
‚Üí Fields: name, type, description, price, image, is_active

2Ô∏è‚É£1Ô∏è‚É£ Create Product model and controller
php artisan make:model Product -m  
php artisan make:controller ProductController

2Ô∏è‚É£2Ô∏è‚É£ Run migration
‚Üí php artisan migrate

2Ô∏è‚É£3Ô∏è‚É£ Add fillable in Product.php model

2Ô∏è‚É£4Ô∏è‚É£ Define CRUD methods in ProductController.php
‚Üí store(), index(), show()





=---------------------------------------------- send mail to register
1Ô∏è‚É£ Create Event
php artisan make:event UserRegistered
Add user property in event constructor

2Ô∏è‚É£ Create Listener
php artisan make:listener SendWelcomeMailListener --event=UserRegistered
Implement ShouldQueue if background queue use karvi

3Ô∏è‚É£ Create Mailable
php artisan make:mail WelcomeMail --markdown=emails.welcome
Use for welcome email template

4Ô∏è‚É£ Fire Event in AuthController
After user creation, add:
event(new UserRegistered($user));

5Ô∏è‚É£ Setup Mailtrap in .env
php artisan config:clear
php artisan cache:clear

6Ô∏è‚É£ Queue Setup (Optional)
php artisan queue:table
php artisan migrate

Run queue worker:
php artisan queue:work
---------------------------------------------------
--------------------üîπ Direct Job + Queue Steps-------------------------
1Ô∏è‚É£ Create Job
php artisan make:job SendWelcomeMailJob
2Ô∏è‚É£ Define Job Logic app/Jobs/SendWelcomeMailJob.php ma:

3Ô∏è‚É£ Dispatch Job in Controller
AuthController ‚Üí register function ma, user create thay pachhi:
SendWelcomeMailJob::dispatch($user);
---------------------------------------------------
